{"version":3,"sources":["pages/Login/styles.module.css","pages/Game/components/Header/styles.module.css","pages/Ranking/components/CardList/styles.module.css","assets/icons/trophy.svg","components/Loading/styles.module.css","pages/Game/styles.module.css","services/api.js","actions/tokenAction.js","reducers/tokenReducer.js","actions/gameActions.js","reducers/gameReducer.js","reducers/index.js","store/index.js","pages/Login/components/Authors.jsx","pages/Login/index.jsx","pages/Settings/index.jsx","pages/Game/components/Header/index.jsx","pages/Game/components/Questions/components/Answers.jsx","pages/Game/components/Questions/index.jsx","utils/localStorage.js","components/Loading/index.jsx","pages/Game/index.jsx","pages/Feedback/index.jsx","pages/Ranking/components/CardList/index.jsx","pages/Ranking/index.jsx","serviceWorker.js","index.js","App.js","pages/Game/components/Questions/styles.module.css"],"names":["module","exports","fetchToken","a","async","fetch","fetchUrl","json","response","localStorage","setItem","JSON","stringify","token","fetchQuestions","getItem","replace","questions","startGameSuccess","user","type","INITIAL_STATE","isLoading","error","getToken","state","action","payload","getQuestionsSuccess","totalScore","rootReducer","combineReducers","settings","game","store","createStore","composeWithDevTools","applyMiddleware","thunk","Authors","className","styles","authors","href","target","rel","Login","props","fields","name","email","playBtn","isDisabled","handleInput","bind","goToGamePage","prevProps","prevState","this","nameHasChanged","emailHasChanged","buttonValidation","id","value","setState","event","preventDefault","getQuestions","push","history","loginPage","src","alt","loginBox","onSubmit","placeholder","onChange","data-testid","disabled","to","Component","connect","dispatch","tokenResponseAPI","Settings","React","hash","String","md5","header","userPhoto","score","trophyIcon","Answers","answersVisibility","answersTimeout","answers","answerSelection","nextQuestion","map","question","difficulty","dataTestid","key","answer","onClick","decode","Questions","indexQuestion","timer","timerInterval","awaitAnswerSelection","lastQuestion","correctAnswer","initCountdown","shuffleAnswers","player","assertions","gravatarEmail","clearInterval","clearTimeout","setInterval","setTimeout","correct_answer","incorrectAnswers","incorrect_answers","incorrect","index","sort","Math","random","answerValue","upScore","easy","medium","hard","newScore","parse","upLocalStorageScore","questionPage","timeBar","timeBar_Bar","style","width","category","questionCounter","results","addScore","Loading","loading","gamePage","Feedback","dispatchReset","newPlayer","picture","getStoragedRanking","ranking","b","setPlayerInRanking","feedbackInfos","buttonPlayAgain","buttonRanking","CardList","position","container","Boolean","window","location","hostname","match","ReactDOM","render","path","component","Game","Ranking","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f30a4573.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"styles_loginPage__1D9qK\",\"loginBox\":\"styles_loginBox__3pA7P\",\"settings\":\"styles_settings__3zuzl\",\"authors\":\"styles_authors__2Tykn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__3BYpN\",\"user\":\"styles_user__2EsA3\",\"userPhoto\":\"styles_userPhoto__3F6JL\",\"score\":\"styles_score__1LNZn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2Tr53\",\"score\":\"styles_score__2sycK\"};","module.exports = __webpack_public_path__ + \"static/media/trophy.bacdab71.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"styles_loading__2HZjI\",\"spinLoading\":\"styles_spinLoading__22xVn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gamePage\":\"styles_gamePage__2Ynb1\"};","export const fetchToken = async () => {\n  const fetchUrl = await fetch('https://opentdb.com/api_token.php?command=request');\n  const response = await fetchUrl.json();\n  localStorage.setItem('token', JSON.stringify(response.token));\n  return response;\n};\n\nexport const fetchQuestions = async () => {\n  await fetchToken();\n  const token = localStorage.getItem('token').replace(/\"/g, '');\n  const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const questions = await response.json();\n  return questions;\n};\n","import { fetchToken } from '../services/api';\n\nexport const TOKEN_RESPONSE = 'TOKEN_RESPONSE';\nexport const TOKEN_SUCCESS = 'TOKEN_SUCCESS';\nexport const TOKEN_ERROR = 'TOKEN_ERROR';\n\nexport const tokenResponse = () => ({\n  type: TOKEN_RESPONSE,\n});\n\nexport const startGameSuccess = (token, user) => ({\n  type: TOKEN_SUCCESS,\n  token,\n  user,\n});\n\nexport const startGameError = (error) => ({\n  type: TOKEN_ERROR,\n  payload: error,\n});\n\nexport function tokenResponseAPI(user) {\n  return async (dispatch) => {\n    dispatch(tokenResponse());\n    try {\n      const { token } = await fetchToken();\n      dispatch(startGameSuccess(token, user));\n    } catch (error) {\n      dispatch(startGameError(error));\n    }\n  };\n}\n","import { TOKEN_SUCCESS, TOKEN_RESPONSE, TOKEN_ERROR } from '../actions/tokenAction';\n\nconst INITIAL_STATE = {\n  user: {},\n  isLoading: false,\n  token: null,\n  error: null,\n};\n\nconst getToken = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case TOKEN_SUCCESS:\n    return {\n      ...state,\n      token: action.token,\n      isLoading: false,\n      user: action.user,\n    };\n\n  case TOKEN_ERROR:\n    return {\n      ...state,\n      error: action.payload,\n      isLoading: false,\n    };\n\n  case TOKEN_RESPONSE:\n    return {\n      ...state,\n      isLoading: true,\n    };\n\n  default: return state;\n  }\n};\n\n// Ref: https://pt.stackoverflow.com/questions/333611/qual-a-diferen%C3%A7a-entre-usar-tostring-e-json-stringify\nexport default getToken;\n","import { fetchQuestions } from '../services/api';\n\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\nexport const GET_QUESTIONS_SUCCESS = 'GET_QUESTIONS_SUCCESS';\nexport const GET_QUESTIONS_ERROR = 'GET_QUESTIONS_ERROR';\nexport const RESET_GAME = 'RESET_GAME';\nexport const ADD_SCORE = 'ADD_SCORE';\n\nexport function getQuestions() {\n  return {\n    type: GET_QUESTIONS,\n  };\n}\n\nexport function getQuestionsSuccess(questions) {\n  return {\n    type: GET_QUESTIONS_SUCCESS,\n    payload: questions,\n  };\n}\n\nexport function getQuestionsError(error) {\n  return {\n    type: GET_QUESTIONS_ERROR,\n    payload: error,\n  };\n}\n\nexport const getQuestionsThunk = () => async (dispatch) => {\n  dispatch(getQuestions());\n  try {\n    const questions = await fetchQuestions();\n    dispatch(getQuestionsSuccess(questions));\n  } catch (error) {\n    dispatch(getQuestionsError(error));\n  }\n};\n\nexport function addScore(score) {\n  return {\n    type: ADD_SCORE,\n    payload: score,\n  };\n}\n","import {\n  ADD_SCORE,\n  RESET_GAME,\n  GET_QUESTIONS,\n  GET_QUESTIONS_ERROR,\n  GET_QUESTIONS_SUCCESS,\n} from '../actions/gameActions';\n\nconst INITIAL_STATE = {\n  error: null,\n  isLoading: false,\n  questions: {},\n  totalScore: 0,\n};\n\nexport default function gameReducer(state = INITIAL_STATE, { type, payload }) {\n  switch (type) {\n  case GET_QUESTIONS:\n    return { ...state, isLoading: true };\n\n  case GET_QUESTIONS_SUCCESS:\n    return { ...state, isLoading: false, questions: payload };\n\n  case GET_QUESTIONS_ERROR:\n    return { ...state, isLoading: false, error: payload };\n\n  case RESET_GAME:\n    return INITIAL_STATE;\n\n  case ADD_SCORE: {\n    return { ...state, totalScore: state.totalScore + payload };\n  }\n\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport getToken from './tokenReducer';\nimport gameReducer from './gameReducer';\n\nconst rootReducer = combineReducers({\n  settings: getToken,\n  game: gameReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport styles from '../styles.module.css';\n\nfunction Authors() {\n  return (\n    <span className={ styles.authors }>\n      Desenvolvido por:\n      <a href=\"https://github.com/mateussays\" target=\"_blank\" rel=\"noopener noreferrer\">Édrei Mateus</a>\n      ,\n      <a href=\"https://github.com/nascjoao\" target=\"_blank\" rel=\"noopener noreferrer\">João Nasc</a>\n      ,\n      <a href=\"https://github.com/ScriptCamilo\" target=\"_blank\" rel=\"noopener noreferrer\">Camilo</a>\n      e\n      <a href=\"https://github.com/WendrickBarreto\" target=\"_blank\" rel=\"noopener noreferrer\">Wendrick Barreto</a>\n      .\n    </span>\n  );\n}\n\nexport default Authors;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { MdSettings } from 'react-icons/md';\nimport { tokenResponseAPI } from '../../actions/tokenAction';\nimport { getQuestionsThunk } from '../../actions/gameActions';\nimport styles from './styles.module.css';\nimport Authors from './components/Authors';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fields: {\n        name: '',\n        email: '',\n      },\n      playBtn: {\n        isDisabled: true,\n      },\n    };\n\n    this.handleInput = this.handleInput.bind(this);\n    this.goToGamePage = this.goToGamePage.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { fields } = this.state;\n    const nameHasChanged = prevState.fields.name !== fields.name;\n    const emailHasChanged = prevState.fields.email !== fields.email;\n    if (nameHasChanged || emailHasChanged) {\n      this.buttonValidation();\n    }\n  }\n\n  handleInput({ target: { id, value } }) {\n    const { fields } = this.state;\n    this.setState({\n      fields: { ...fields, [id]: value },\n    });\n  }\n\n  buttonValidation() {\n    const { fields, playBtn } = this.state;\n\n    this.setState({\n      playBtn: { ...playBtn, isDisabled: !(fields.name !== '' && fields.email !== '') },\n    });\n  }\n\n  goToGamePage(event) {\n    event.preventDefault();\n    const { fields: user } = this.state;\n    const { getToken, getQuestions, history: { push } } = this.props;\n    getToken(user);\n    getQuestions();\n    push('/game');\n  }\n\n  render() {\n    const { playBtn, fields } = this.state;\n    return (\n      <div className={ styles.loginPage }>\n        <img src=\"logo.png\" alt=\"\" />\n        <form className={ styles.loginBox } onSubmit={ this.goToGamePage }>\n          <input\n            type=\"text\"\n            id=\"name\"\n            placeholder=\"Name\"\n            onChange={ this.handleInput }\n            value={ fields.name }\n            data-testid=\"input-player-name\"\n          />\n          <input\n            type=\"text\"\n            id=\"email\"\n            placeholder=\"E-mail\"\n            onChange={ this.handleInput }\n            value={ fields.email }\n            data-testid=\"input-gravatar-email\"\n          />\n          <button\n            type=\"submit\"\n            disabled={ playBtn.isDisabled }\n            data-testid=\"btn-play\"\n            className=\"btn-primary\"\n          >\n            Jogar\n          </button>\n        </form>\n        <Link to=\"/settings\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            className={ styles.settings }\n          >\n            <MdSettings />\n          </button>\n        </Link>\n        <Authors />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: (user) => dispatch(tokenResponseAPI(user)),\n  getQuestions: () => dispatch(getQuestionsThunk()),\n});\n\nLogin.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }) }.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">Configurações</h1>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\n\nimport styles from './styles.module.css';\n\nimport trophyIcon from '../../../../assets/icons/trophy.svg';\n\nfunction Header({ user, totalScore }) {\n  const hash = String(md5(user.email));\n\n  return (\n    <div className={ styles.header }>\n      <span className={ styles.user }>\n        <span className={ styles.userPhoto }>\n          <img\n            src={ `https://www.gravatar.com/avatar/${hash}` }\n            alt={ user.name }\n            data-testid=\"header-profile-picture\"\n          />\n        </span>\n        <strong data-testid=\"header-player-name\">{user.name}</strong>\n      </span>\n      <span className={ styles.score }>\n        <div>\n          Pontos:\n          <span data-testid=\"header-score\">{totalScore}</span>\n        </div>\n        <img src={ trophyIcon } alt=\"Troféu\" />\n      </span>\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ settings: { user }, game: { totalScore } }) => ({\n  user,\n  totalScore,\n});\n\nHeader.propTypes = {\n  user: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n  }),\n  totalScore: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { decode } from 'he';\nimport styles from '../styles.module.css';\n\nfunction Answers({ answersVisibility, answersTimeout,\n  answers, answerSelection, nextQuestion }) {\n  return (\n    <div className={ `${styles.answers} ${answersVisibility}` }>\n      { answers.map(({ question, difficulty, dataTestid }) => (\n        <button\n          key={ question }\n          data-testid={ dataTestid }\n          type=\"button\"\n          className={ `${styles.answer}\n            ${dataTestid === 'correct-answer' ? 'answer-btn-cor' : 'answer-btn-inc'}\n          ` }\n          disabled={ answersTimeout }\n          onClick={ () => answerSelection(dataTestid, difficulty) }\n        >\n          { decode(question) }\n\n        </button>\n      )) }\n      { answersVisibility !== 'hidden' && (\n        <button\n          type=\"button\"\n          data-testid=\"btn-next\"\n          onClick={ nextQuestion }\n          className={ `btn-primary ${styles.nextQuestion}` }\n        >\n          Próxima\n        </button>\n      )}\n    </div>\n  );\n}\n\nAnswers.propTypes = {\n  answersVisibility: PropTypes.string.isRequired,\n  answersTimeout: PropTypes.bool.isRequired,\n  answers: PropTypes.arrayOf(PropTypes.object).isRequired,\n  answerSelection: PropTypes.func.isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n};\n\nexport default Answers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport { Redirect } from 'react-router';\nimport { decode } from 'he';\nimport styles from './styles.module.css';\nimport { addScore } from '../../../../actions/gameActions';\nimport { upLocalStorageScore } from '../../../../utils/localStorage';\nimport Answers from './components/Answers';\n\nclass Questions extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      answersVisibility: 'hidden',\n      indexQuestion: 0,\n      answersTimeout: false,\n      timer: 30,\n      answers: [],\n    };\n\n    this.timerInterval = null;\n    this.awaitAnswerSelection = null;\n    this.lastQuestion = 4;\n\n    this.correctAnswer = 'correct-answer';\n\n    this.answerSelection = this.answerSelection.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    this.initCountdown();\n    this.shuffleAnswers();\n\n    const { user: { name, email } } = this.props;\n    localStorage.setItem('state', JSON.stringify({ player: {\n      name,\n      assertions: 0,\n      score: 0,\n      gravatarEmail: `https://www.gravatar.com/avatar/${String(md5(email))}`,\n    } }));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { indexQuestion } = this.state;\n    if (prevState.indexQuestion !== indexQuestion && indexQuestion <= this.lastQuestion) {\n      this.initCountdown();\n      this.shuffleAnswers();\n    }\n  }\n\n  nextQuestion() {\n    const { indexQuestion } = this.state;\n    this.setState({\n      answersVisibility: 'hidden',\n      indexQuestion: indexQuestion <= this.lastQuestion && indexQuestion + 1,\n      timer: 30,\n    });\n  }\n\n  initCountdown() {\n    clearInterval(this.timerInterval);\n    clearTimeout(this.awaitAnswerSelection);\n\n    const oneSecond = 1000;\n    const fiveSeconds = 5000;\n    this.timerInterval = setInterval(() => {\n      const { timer } = this.state;\n      if (timer > 0) {\n        this.setState({ timer: timer - 1 });\n      } else {\n        clearInterval(this.timerInterval);\n        this.awaitAnswerSelection = setTimeout(() => {\n          this.setState({\n            answersVisibility: 'visible',\n            answersTimeout: true,\n          });\n        }, fiveSeconds);\n      }\n    }, oneSecond);\n  }\n\n  shuffleAnswers() {\n    const { questions } = this.props;\n    const { indexQuestion } = this.state;\n    const mathRandomMiddleNumber = 0.5;\n    const correctAnswer = {\n      question: questions[indexQuestion].correct_answer,\n      difficulty: questions[indexQuestion].difficulty,\n      dataTestid: this.correctAnswer,\n    };\n    const incorrectAnswers = questions[indexQuestion].incorrect_answers\n      .map((incorrect, index) => ({\n        question: incorrect,\n        difficulty: questions[indexQuestion].difficulty,\n        dataTestid: `wrong-answer-${index}`,\n      }));\n\n    let answers = [correctAnswer, ...incorrectAnswers];\n    answers = answers.sort(() => Math.random() - mathRandomMiddleNumber);\n\n    this.setState({ answers });\n  }\n\n  answerSelection(answerValue, difficulty) {\n    this.setState({ answersVisibility: 'visible' });\n\n    if (answerValue === this.correctAnswer) {\n      const { upScore } = this.props;\n      const { timer } = this.state;\n      const basePoints = 10;\n      const difficultyPoints = {\n        easy: 1,\n        medium: 2,\n        hard: 3,\n      };\n      const score = basePoints + (timer * difficultyPoints[difficulty]);\n      upScore(score);\n      upLocalStorageScore(score);\n    }\n\n    clearInterval(this.timerInterval);\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { answersVisibility, answersTimeout,\n      answers, indexQuestion, timer } = this.state;\n    const numberOfQuestions = 4;\n    if (indexQuestion > numberOfQuestions) {\n      return <Redirect to=\"/feedback\" />;\n    }\n    const to100Percent = 3.33;\n    return (\n      <div className={ styles.questionPage }>\n        <div className={ styles.timeBar }>\n          <div\n            className={ styles.timeBar_Bar }\n            style={ { width: `${timer * to100Percent}%` } }\n          />\n        </div>\n        <div className={ styles.question }>\n          <span data-testid=\"question-category\">\n            { questions[indexQuestion].category }\n          </span>\n          <p data-testid=\"question-text\">\n            { decode(questions[indexQuestion].question) }\n          </p>\n          <div className={ styles.questionCounter }>\n            { `Questão ${indexQuestion + 1}/5` }\n          </div>\n        </div>\n        <Answers\n          answersVisibility={ answersVisibility }\n          answersTimeout={ answersTimeout }\n          answers={ answers }\n          nextQuestion={ this.nextQuestion }\n          answerSelection={ this.answerSelection }\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ settings: { user }, game: { questions } }) => ({\n  user,\n  questions: questions.results,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  upScore: (score) => dispatch(addScore(score)),\n});\n\nQuestions.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n  }),\n  questions: PropTypes.object,\n  upScore: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","export function upLocalStorageScore(newScore) {\n  const state = JSON.parse(localStorage.getItem('state'));\n\n  if (state) {\n    const { player } = state;\n    localStorage.setItem('state', JSON.stringify({\n      player: {\n        ...player,\n        assertions: player.assertions + 1,\n        score: player.score + newScore,\n      },\n    }));\n  }\n}\n\nexport function setPlayerInRanking() {\n  const { player } = JSON.parse(localStorage.getItem('state'));\n  const { name, score, gravatarEmail } = player;\n  const newPlayer = { name, score, picture: gravatarEmail };\n\n  const getStoragedRanking = () => JSON.parse(localStorage.getItem('ranking'));\n  const ranking = getStoragedRanking() ? getStoragedRanking() : [];\n\n  ranking.push(newPlayer);\n  ranking.sort((a, b) => b.score - a.score);\n  localStorage.setItem('ranking', JSON.stringify(ranking));\n}\n\nexport function getRanking() {\n  const ranking = JSON.parse(localStorage.getItem('ranking'));\n\n  return ranking;\n}\n","import React from 'react';\nimport { VscLoading } from 'react-icons/vsc';\nimport styles from './styles.module.css';\n\nfunction Loading() {\n  return (\n    <div className={ styles.loading }>\n      <VscLoading />\n    </div>\n  );\n}\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from './components/Header';\nimport Questions from './components/Questions';\nimport Loading from '../../components/Loading';\nimport styles from './styles.module.css';\n\nfunction Game({ user, questions }) {\n  const isLoading = !user.name || !questions.results;\n  if (isLoading) return <Loading />;\n\n  return (\n    <div className={ styles.gamePage }>\n      <Header />\n      <Questions />\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ settings: { user }, game: { questions } }) => ({\n  user,\n  questions,\n});\n\nGame.propTypes = {\n  user: PropTypes.object,\n  questions: PropTypes.object,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Game);\n","import React from 'react';\nimport { func } from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { setPlayerInRanking } from '../../utils/localStorage';\n\nimport Header from '../Game/components/Header';\n\nclass Feedback extends React.Component {\n  feedbackInfos() {\n    const minimunAssertions = 3;\n    const state = JSON.parse(localStorage.getItem('state'));\n    const { player: { score, assertions } } = state;\n    return (\n      <section>\n        <p data-testid=\"feedback-text\">\n          {assertions < minimunAssertions ? 'Podia ser melhor...' : 'Mandou bem!'}\n        </p>\n        <p>\n          Pontuação Final:\n          <span data-testid=\"feedback-total-score\">\n            { score }\n          </span>\n        </p>\n        <p>\n          Número de acertos:\n          <span data-testid=\"feedback-total-question\">\n            { assertions }\n          </span>\n        </p>\n      </section>\n    );\n  }\n\n  buttonPlayAgain(dispatchReset) {\n    return (\n      <Link onClick={ dispatchReset } to=\"/\">\n        <button\n          type=\"button\"\n          data-testid=\"btn-play-again\"\n        >\n          Jogar Novamente\n        </button>\n      </Link>\n    );\n  }\n\n  buttonRanking() {\n    return (\n      <Link to=\"/ranking\">\n        <button\n          type=\"button\"\n          data-testid=\"btn-ranking\"\n        >\n          Ver Ranking\n        </button>\n      </Link>\n    );\n  }\n\n  render() {\n    const { dispatchReset } = this.props;\n    setPlayerInRanking();\n\n    return (\n      <section>\n        <Header />\n        {this.feedbackInfos()}\n        {this.buttonPlayAgain(dispatchReset)}\n        {this.buttonRanking()}\n      </section>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  dispatchReset: func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchReset: () => dispatch({ type: 'RESET_GAME' }),\n});\n\nexport default connect(null, mapDispatchToProps)(Feedback);\n","import React from 'react';\nimport { string, number } from 'prop-types';\n\nimport styles from './styles.module.css';\n\nfunction CardList({ name, score, picture, position }) {\n  const index = position - 1;\n\n  return (\n    <li className={ styles.container }>\n      <span>\n        { position }\n        °\n      </span>\n      <figure>\n        <img src={ picture } alt={ name } />\n      </figure>\n\n      <section className={ styles.score }>\n        <p data-testid={ `player-name-${index}` }>{name}</p>\n        <hr />\n        <p>\n          Pontuação:\n          <span data-testid={ `player-score-${index}` }>{score}</span>\n        </p>\n      </section>\n    </li>\n  );\n}\n\nCardList.propTypes = {\n  name: string.isRequired,\n  score: number.isRequired,\n  picture: string.isRequired,\n  position: number.isRequired,\n};\n\nexport default CardList;\n","import React from 'react';\nimport { func } from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { getRanking } from '../../utils/localStorage';\n\nimport CardList from './components/CardList';\n\nfunction Ranking({ dispatchReset }) {\n  const ranking = getRanking();\n\n  return (\n    <>\n      <h1 data-testid=\"ranking-title\">Ranking</h1>\n      <ol>\n        {\n          ranking.map((player, index) => (\n            <CardList key={ index } { ...player } position={ index + 1 } />\n          ))\n        }\n      </ol>\n      <Link data-testid=\"btn-go-home\" onClick={ dispatchReset } to=\"/\">\n        Jogar Novamente\n      </Link>\n    </>\n  );\n}\n\nRanking.propTypes = {\n  dispatchReset: func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchReset: () => dispatch({ type: 'RESET_GAME' }),\n});\n\nexport default connect(null, mapDispatchToProps)(Ranking);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionPage\":\"styles_questionPage__1-Ciy\",\"question\":\"styles_question__V_-At\",\"answers\":\"styles_answers__38jRf\",\"answer\":\"styles_answer__36j9b\",\"nextQuestion\":\"styles_nextQuestion__3kKLc\",\"timeBar\":\"styles_timeBar__2CUkI\",\"timeBar_Bar\":\"styles_timeBar_Bar__2sRHg\",\"questionCounter\":\"styles_questionCounter__3lZiD\"};"],"sourceRoot":""}